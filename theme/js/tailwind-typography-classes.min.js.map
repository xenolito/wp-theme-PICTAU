{
  "version": 3,
  "sources": ["../../javascript/tailwind-typography-classes.js"],
  "sourcesContent": ["/* global wp, tailwindTypographyClasses */\n\n/**\n * Tailwind Typography support from _tw\n *\n * The code below adds your front-end post title and Tailwind Typography\n * classes to the block editor. It also adds some helper classes so you can\n * access the post type when modifying the block editor\u2019s appearance.\n *\n * You should not edit this file. If you would like to use JavaScript to\n * modify the block editor, please use the `block-editor.js` file instead.\n *\n * The JavaScript code you place here will be processed by esbuild. The output\n * file will be created at `../theme/js/tailwind-typography-classes.min.js` and\n * enqueued in `../theme/functions.php`.\n *\n * For esbuild documentation, please see:\n * https://esbuild.github.io/\n */\n\n// Set our target classes and the classes we\u2019ll add to them.\nvar targetClasses = {\n\t'edit-post-visual-editor__post-title-wrapper': ['entry-header'],\n\t'wp-block-post-title': ['entry-title'],\n\t'wp-block-post-content': ['entry-content', ...tailwindTypographyClasses],\n};\n\nwp.domReady(() => {\n\t// Add the necessary Tailwind Typography classes to the block editor.\n\taddTypographyClasses();\n});\n\n/**\n * Get the class for the current post type from the `body` element. (We would\n * use `wp.data`, but it doesn't work reliably both inside and outside of the\n * post editor `iframe`.)\n */\nfunction getCurrentPostTypeClass() {\n\tlet currentClass = null;\n\n\tfor (const classToCheck of document.body.classList) {\n\t\tif (classToCheck.startsWith('post-type-')) {\n\t\t\tcurrentClass = classToCheck;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn currentClass;\n}\n\n/**\n * Because Gutenberg\u2019s `isEditorReady` function remains unstable,\n * we\u2019ll use an interval to watch for the arrival of the elements we need.\n */\nfunction addTypographyClasses() {\n\tconst editorLoadedInterval = setInterval(function () {\n\t\t// Wait until elements with all target classes are present.\n\t\tif (\n\t\t\tObject.keys(targetClasses).every(\n\t\t\t\t(className) => document.getElementsByClassName(className).length\n\t\t\t)\n\t\t) {\n\t\t\tif (getCurrentPostTypeClass()) {\n\t\t\t\t// Add the post type class throughout.\n\t\t\t\tObject.values(targetClasses).forEach((className) =>\n\t\t\t\t\tclassName.push(getCurrentPostTypeClass())\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Add the classes before creating the mutation observer.\n\t\t\tObject.entries(targetClasses).forEach(([targetClass, classes]) => {\n\t\t\t\tdocument\n\t\t\t\t\t.getElementsByClassName(targetClass)[0]\n\t\t\t\t\t.classList.add(...classes);\n\t\t\t});\n\n\t\t\t// Add mutation observers to each element.\n\t\t\tObject.keys(targetClasses).forEach((className) => {\n\t\t\t\tmutationObserver.observe(\n\t\t\t\t\tdocument.querySelector('.' + className),\n\t\t\t\t\t{\n\t\t\t\t\t\tattributes: true,\n\t\t\t\t\t\tattributeFilter: ['class'],\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t// Stop the interval.\n\t\t\tclearInterval(editorLoadedInterval);\n\t\t} else if (document.getElementsByName('editor-canvas').length) {\n\t\t\t// If the block editor has been loaded in an iframe, and this code\n\t\t\t// is running outside of that iframe, stop the interval. (This code\n\t\t\t// will run again inside the iframe.)\n\t\t\tclearInterval(editorLoadedInterval);\n\t\t}\n\t}, 40);\n}\n\n/**\n * We need to ensure the class names we add are added again if the React\n * component is updated, removing them in the process. The mutation observer\n * below will check for the needed classes and add them if they\u2019ve been\n * removed.\n */\nconst mutationObserver = new MutationObserver(function (mutations) {\n\tmutations.forEach(function (mutation) {\n\t\tconst classList = mutation.target.classList;\n\n\t\tObject.entries(targetClasses).forEach(([targetClass, classes]) => {\n\t\t\tif (classList.contains(targetClass)) {\n\t\t\t\t// Check whether all added classes are present.\n\t\t\t\tif (\n\t\t\t\t\t!classes.every((className) => classList.contains(className))\n\t\t\t\t) {\n\t\t\t\t\t// Add them again if they\u2019re not.\n\t\t\t\t\tclassList.add(...classes);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n});\n"],
  "mappings": ";;AAqBA,MAAI,gBAAgB;AAAA,IACnB,+CAA+C,CAAC,cAAc;AAAA,IAC9D,uBAAuB,CAAC,aAAa;AAAA,IACrC,yBAAyB,CAAC,iBAAiB,GAAG,yBAAyB;AAAA,EACxE;AAEA,KAAG,SAAS,MAAM;AAEjB,yBAAqB;AAAA,EACtB,CAAC;AAOD,WAAS,0BAA0B;AAClC,QAAI,eAAe;AAEnB,eAAW,gBAAgB,SAAS,KAAK,WAAW;AACnD,UAAI,aAAa,WAAW,YAAY,GAAG;AAC1C,uBAAe;AACf;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAMA,WAAS,uBAAuB;AAC/B,UAAM,uBAAuB,YAAY,WAAY;AAEpD,UACC,OAAO,KAAK,aAAa,EAAE;AAAA,QAC1B,CAAC,cAAc,SAAS,uBAAuB,SAAS,EAAE;AAAA,MAC3D,GACC;AACD,YAAI,wBAAwB,GAAG;AAE9B,iBAAO,OAAO,aAAa,EAAE;AAAA,YAAQ,CAAC,cACrC,UAAU,KAAK,wBAAwB,CAAC;AAAA,UACzC;AAAA,QACD;AAGA,eAAO,QAAQ,aAAa,EAAE,QAAQ,CAAC,CAAC,aAAa,OAAO,MAAM;AACjE,mBACE,uBAAuB,WAAW,EAAE,CAAC,EACrC,UAAU,IAAI,GAAG,OAAO;AAAA,QAC3B,CAAC;AAGD,eAAO,KAAK,aAAa,EAAE,QAAQ,CAAC,cAAc;AACjD,2BAAiB;AAAA,YAChB,SAAS,cAAc,MAAM,SAAS;AAAA,YACtC;AAAA,cACC,YAAY;AAAA,cACZ,iBAAiB,CAAC,OAAO;AAAA,YAC1B;AAAA,UACD;AAAA,QACD,CAAC;AAGD,sBAAc,oBAAoB;AAAA,MACnC,WAAW,SAAS,kBAAkB,eAAe,EAAE,QAAQ;AAI9D,sBAAc,oBAAoB;AAAA,MACnC;AAAA,IACD,GAAG,EAAE;AAAA,EACN;AAQA,MAAM,mBAAmB,IAAI,iBAAiB,SAAU,WAAW;AAClE,cAAU,QAAQ,SAAU,UAAU;AACrC,YAAM,YAAY,SAAS,OAAO;AAElC,aAAO,QAAQ,aAAa,EAAE,QAAQ,CAAC,CAAC,aAAa,OAAO,MAAM;AACjE,YAAI,UAAU,SAAS,WAAW,GAAG;AAEpC,cACC,CAAC,QAAQ,MAAM,CAAC,cAAc,UAAU,SAAS,SAAS,CAAC,GAC1D;AAED,sBAAU,IAAI,GAAG,OAAO;AAAA,UACzB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAAA,EACF,CAAC;",
  "names": []
}
